1.3 sum closest

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()  # Sort the input array in ascending order.
        closest_sum = float('inf')  

        for i in range(len(nums) - 2):
            left, right = i + 1, len(nums) - 1

            while left < right:
                current_sum = nums[i] + nums[left] + nums[right]

            
                if abs(target - current_sum) < abs(target - closest_sum):
                    closest_sum = current_sum

                if current_sum < target:
                    left += 1
                else:
                    right -= 1

        return closest_sum

# Example usage:
nums = [-1, 2, 1, -4]
target = 1
result = Solution().threeSumClosest(nums, target)
print(result)  


2. Letter combinations of a number

class Solution:
    def letterCombinations(self, digits: str) -> List[str]:
        phone_map = {
            '2': 'abc',
            '3': 'def',
            '4': 'ghi',
            '5': 'jkl',
            '6': 'mno',
            '7': 'pqrs',
            '8': 'tuv',
            '9': 'wxyz'
        }
        if digits=="":
            return []
        numbers=list(phone_map[digits[0]])
        for digit in digits[1:]:
            numbers=[old+new for old in numbers for new in list(phone_map[digit])]
        return numbers

3.merged two sorted arrays

class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        if list1==None:
            return list2
        if list2==None:
            return list1
        if (list1.val<list2.val):
            head= list1
            list1=list1.next
        else:
            head=list2
            list2=list2.next
        head.next=self.mergeTwoLists(list1,list2)
        return head
      
  