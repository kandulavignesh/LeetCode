1.You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]).

Find two lines that together with the x-axis form a container, such that the container contains the most water.


class problem {
    public int maxArea(int[] height) {
        int maxArea = 0;
        int left = 0;
        int right = height.length - 1;

        while (left < right) {
            
            int width = right - left;
            
  
            int h = Math.min(height[left], height[right]);
            

            int area = width * h;
            maxArea = Math.max(maxArea, area);

            if (height[left] < height[right]) {
                left++;
            } else {
                right--;
            }
        }

        return maxArea;
    }
}


2.Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. 


class Solution {
    public int romanToInt(String s) {
        HashMap<Character, Integer> romanValues = new HashMap<>();
        romanValues.put('I', 1);
        romanValues.put('V', 5);
        romanValues.put('X', 10);
        romanValues.put('L', 50);
        romanValues.put('C', 100);
        romanValues.put('D', 500);
        romanValues.put('M', 1000);

        int result = 0;


        for (int i = s.length() - 1; i >= 0; i--) {
            char currentChar = s.charAt(i);

            
            if (i < s.length() - 1 && romanValues.get(currentChar) < romanValues.get(s.charAt(i + 1))) {
                result -= romanValues.get(currentChar);
            } else {
                // Otherwise, add the current value to the result.
                result += romanValues.get(currentChar);
            }
        }

        return result;
    }
}